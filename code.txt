#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <MPU6050.h>
#include <SoftwareSerial.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define SCREEN_ADDRESS 0x3C // I2C address of the OLED module
#define SSD1306_I2C_ADDRESS 0x3C // I2C address of the OLED module

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);
MPU6050 mpu;
SoftwareSerial gsmSerial(7, 8); // RX, TX pins for GSM module

// Variables to store the accelerometer data
int16_t ax, ay, az;

// Variables to store the previous accelerometer data
int16_t previousAx, previousAy, previousAz;

// Variables to store the frequency and velocity data
float frequency = 0.0;
float velocity = 0.0;
float previousTime = 0.0;

// Define the LED pins
const int lowFrequencyLED = 2;   // Replace with the actual pin number
const int mediumFrequencyLED = 3; // Replace with the actual pin number
const int highFrequencyLED = 4;   // Replace with the actual pin number
const int redLED = 5; // Pin for the red LED, representing high frequency

bool isSendingSMS = false;  // Track if SMS sending is in progress
char phoneNumber[] = "+919949871077";  // Replace with the recipient's phone number

void setup() {
  Wire.begin();

  // Initialize the MPU6050
  mpu.initialize();

  // Initialize the OLED display
  if (!display.begin(SSD1306_I2C_ADDRESS, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;);
  }

  // Initialize LED pins as OUTPUT
  pinMode(lowFrequencyLED, OUTPUT);
  pinMode(mediumFrequencyLED, OUTPUT);
  pinMode(highFrequencyLED, OUTPUT);
  pinMode(redLED, OUTPUT); // Set the red LED pin as an output

  display.display();
  delay(2000);
  display.clearDisplay();

  // Initialize the GSM module
  gsmSerial.begin(9600);

  delay(1000);

  Serial.println("Initializing GSM module...");
  gsmSerial.println("AT");  // Check if the module is responsive
  delay(1000);
  while (gsmSerial.available()) {
    Serial.write(gsmSerial.read());
  }

  Serial.println("Configuring SMS mode...");
  gsmSerial.println("AT+CMGF=1");  // Set SMS mode to text
  delay(1000);
  while (gsmSerial.available()) {
    Serial.write(gsmSerial.read());
  }
}

void loop() {
  // Read the accelerometer data
  mpu.getMotion6(&ax, &ay, &az, NULL, NULL, NULL);

  // Calculate the time elapsed since the last loop iteration
  float timeElapsed = millis() / 1000.0 - previousTime;

  // Calculate the acceleration
  float acceleration = (ax - previousAx) / timeElapsed;

  // Calculate the frequency and velocity
  frequency = abs(ax - previousAx) / 100.0;
  velocity = acceleration * timeElapsed;

  // Update the previous accelerometer data and time
  previousAx = ax;
  previousTime = millis() / 1000.0;

  // Display the frequency and velocity on the OLED screen
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.print("Frequency: ");
  display.print(frequency);
  display.print(" Hz");
  display.setCursor(0, 10);
  display.print("Velocity: ");
  display.print(velocity);
  display.print(" m/s");

  // Control the LEDs based on frequency
  if (frequency >= 0 && frequency < 5.0) {
    digitalWrite(lowFrequencyLED, HIGH);
    digitalWrite(mediumFrequencyLED, LOW);
    digitalWrite(highFrequencyLED, LOW);
    digitalWrite(redLED, LOW); // Turn off the red LED
  } else if (frequency >= 5.0 && frequency < 10.0) {
    digitalWrite(lowFrequencyLED, LOW);
    digitalWrite(mediumFrequencyLED, HIGH);
    digitalWrite(highFrequencyLED, LOW);
    digitalWrite(redLED, LOW); // Turn off the red LED
  } else {
    digitalWrite(lowFrequencyLED, LOW);
    digitalWrite(mediumFrequencyLED, LOW);
    digitalWrite(highFrequencyLED, HIGH);
    digitalWrite(redLED, HIGH); // Turn on the red LED

    // Send an SMS alert when the red LED is turned on and the frequency crosses 10.0
    if (!isSendingSMS && frequency > 10.0) {
      sendSMSAlert();
    }
  }

  display.display();

  // Delay for 500 milliseconds
  delay(500);
}

void sendSMSAlert() {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.print("Sending SMS...");
  display.display();
  delay(1000);  // Display "Sending SMS..." for a moment

  gsmSerial.print("AT+CMGS=\"");
  gsmSerial.print(phoneNumber);
  gsmSerial.println("\"");  // Set the recipient's phone number
  delay(1000);

  while (gsmSerial.available()) {
    Serial.write(gsmSerial.read());
  }

  gsmSerial.print("Warning: Frequency exceeded 10.0 Hz");  // Send the warning message
  gsmSerial.write(26);  // Ctrl+Z to indicate the end of the message
  delay(1000);

  while (gsmSerial.available()) {
    Serial.write(gsmSerial.read());
  }

  isSendingSMS = false;  // Reset the flag after sending the message
}